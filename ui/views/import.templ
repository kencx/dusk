package views

import (
	"errors"
	"net/http"
	"strconv"

	"github.com/kencx/dusk/ui/shared"
	"github.com/kencx/dusk/ui/partials"
	ol "github.com/kencx/dusk/integrations/openlibrary"
)

const (
	OPENLIBRARY partials.TabName = "Openlibrary"
	GOODREADS                    = "Goodreads"
	CALIBRE                      = "Calibre"
	UPLOAD                       = "Upload"
)

var (
	ImportTabs = partials.Tab{
		Order: []partials.TabName{OPENLIBRARY, GOODREADS, CALIBRE, UPLOAD},
		Contents: map[partials.TabName]templ.Component{
			OPENLIBRARY: openLibraryForm(),
			GOODREADS:   goodreadsForm(),
			CALIBRE:     calibreForm(),
			UPLOAD:      uploadForm(),
		},
		RootPath: "/import",
	}
	ErrNotValidIsbn = errors.New("invalid isbn")
)

type Search struct {
	DefaultTab partials.TabName
	Results    ol.QueryResults
	Message    string
	Err        error
}

func ImportRenderResults(rw http.ResponseWriter, r *http.Request, res ol.QueryResults) {
	ImportResults(res, "", nil).Render(r.Context(), rw)
}

func ImportResultsMessage(rw http.ResponseWriter, r *http.Request, res ol.QueryResults, message string) {
	ImportResults(res, message, nil).Render(r.Context(), rw)
}

func ImportResultsError(rw http.ResponseWriter, r *http.Request, err error) {
	ImportResults(nil, "", err).Render(r.Context(), rw)
}

func (v Search) Render(rw http.ResponseWriter, r *http.Request) {
	v.Html().Render(r.Context(), rw)
}

templ (v *Search) Html() {
	@shared.Base() {
		<h2>Add Books</h2>
		@partials.Tabs(v.DefaultTab, ImportTabs)
		<div class="import__result_list"></div>
	}
}

templ openLibraryForm() {
	<form
		hx-post="/import/openlibrary"
		hx-target=".import__result_list"
		hx-swap="innerHTML"
		hx-indicator=".spinner"
	>
		<div class="openlibrary-form input-group vertical">
			<label for="search">Add a book from <a href="https://openlibrary.org">OpenLibrary</a>:</label>
			<input id="search" name="openlibrary" placeholder="Enter an ISBN, Title or Author"/>
			<small>ISBNs must contain 10 or 13 characters, including dashes and spaces.</small>
		</div>
		<button class="small" type="submit">Submit</button>
		<div class="spinner"></div>
	</form>
}

templ goodreadsForm() {
	<form class="goodreads-form" action="/import/goodreads" method="POST">
		<div class="input-group vertical">
			<label class="goodreads" for="goodreads">Choose a Goodreads csv file:</label>
			<input type="file" name="goodreads" accept=".csv" required/>
		</div>
		<button class="small" type="submit">Submit</button>
	</form>
}

templ calibreForm() {
	<form action="/import/calibre" method="POST">
		<input id="calibre" name="calibre" required/>
		<button type="submit">Submit</button>
	</form>
}

templ uploadForm() {
	<form
		class="upload-form"
		hx-post="/upload"
		hx-target=".import__result_list"
		hx-swap="innerHTML"
		enctype="multipart/form-data"
	>
		<div class="input-group vertical">
			<label class="upload" for="upload">Upload a file:</label>
			<input type="file" name="upload" accept=".epub,.mobi,.pdf,.txt,.html" required/>
			<small>EPUB, MOBI, PDF supported</small>
		</div>
		<button class="small" type="submit">Submit</button>
	</form>
}

templ ImportResults(results ol.QueryResults, message string, err error) {
	if err == ErrNotValidIsbn {
		<div class="card error fluid">
			<p>
				You entered an invalid ISBN. A book's ISBN is usually found on the
				back cover, near the barcode. It will contain 10 or 13 characters, plus
				any dashes and spaces.
			</p>
			<p>
				Valid examples: 978-0495011606, 9780136006176, 0077354761,
				013603599X
			</p>
			<p>
				Alternatively, you can try searching for the book's title or
				author.
			</p>
		</div>
	} else if err != nil {
		<div class="card error fluid">
			<p>Something went wrong, please try again</p>
		</div>
	}
	if message != "" {
		<div class="card fluid message">
			@templ.Raw(message)
		</div>
	}
	// TODO split results list and messages
	if err == nil {
		<h2>
			Results
			<small>Found { strconv.Itoa(len(results)) } result(s)</small>
		</h2>
		<form hx-indicator=".spinner">
			for _, result := range results {
				<div class="import__result">
					<img alt="" src={ result.CoverUrl }/>
					<div class="details">
						<h4>
							{ result.Title }
							<small>
								for _, author := range result.Authors {
									<span class="author">{ author }</span>
								}
							</small>
						</h4>
						<ul>
							<li>
								if len(result.Isbn10) > 0 || len(result.Isbn13) > 0 {
									ISBN:
									if len(result.Isbn10) > 0 {
										{ result.Isbn10[0] }
									}
									if len(result.Isbn13) > 0 {
										{ result.Isbn13[0] }
									}
								}
							</li>
							<li>
								if result.PublishDate != "" {
									Published: { result.PublishDate }
								}
							</li>
						</ul>
					</div>
					if len(result.Isbn10) > 0 {
						<input type="hidden" name="result" value={ result.Isbn10[0] }/>
					}
					if len(result.Isbn13) > 0 {
						<input type="hidden" name="result" value={ result.Isbn13[0] }/>
					}
					<div class="actions">
						<select
							name="tag-option"
							hx-trigger="change"
							hx-post="/import/add"
							hx-target=".import__result_list"
							hx-swap="innerHTML"
							hx-include="this"
						>
							<option value="add">Add book</option>
							<option value="to-read">To read</option>
							<option value="reading">Reading</option>
							<option value="read">Read</option>
						</select>
					</div>
				</div>
			}
			<div class="spinner"></div>
		</form>
	}
}
