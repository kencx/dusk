package views

import (
	"fmt"
	"net/http"
	"path"
	"strconv"

	"github.com/kencx/dusk"
	"github.com/kencx/dusk/ui/partials"
	"github.com/kencx/dusk/ui/shared"
)

type TagList struct {
	page dusk.Page[dusk.Tag]
	shared.Base
}

func NewTagList(base shared.Base, page dusk.Page[dusk.Tag], err error) *TagList {
	base.Err = err
	return &TagList{page, base}
}

func (v *TagList) Render(rw http.ResponseWriter, r *http.Request) {
	v.Html().Render(r.Context(), rw)
}

templ (v *TagList) Html() {
	@v.Base.Html() {
		<h2>Tags</h2>
		if v.Err == dusk.ErrNoRows {
			@partials.Empty()
		} else {
			@partials.ItemSearch("/t/search", ".list")
			<div class="list">
				@TagSearchResults(v.page, v.Err)
			</div>
		}
	}
}

templ TagSearchResults(page dusk.Page[dusk.Tag], err error) {
	@partials.ItemSearchResults(page, err) {
		<div class="list__tag-view">
			<ul>
				@TagListPage(page)
			</ul>
		</div>
	}
}

templ TagListPage(page dusk.Page[dusk.Tag]) {
	for _, tag := range page.Items {
		@listTag(tag)
	}
	if !page.Last() {
		<hr
			class="message infinite-scroll"
			hx-get={ fmt.Sprintf("/a/search?%safter_id=%d", page.Query, page.LastNo()) }
			hx-target=".list__author-view ul"
			hx-swap="beforeend"
			hx-trigger="revealed"
		/>
	} else {
		<p class="message">END</p>
	}
	if !page.First() {
		<span id="item-counter" hx-swap-oob="true">{ strconv.Itoa(page.LastNo()) }</span>
	}
}

templ listTag(tag dusk.Tag) {
	<li>
		<a href={ templ.URL(path.Join("t", tag.Slugify())) }>
			{ tag.Name }
		</a>
	</li>
}
