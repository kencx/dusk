package views

import (
	"fmt"
	"net/http"
	"strconv"
	"strings"

	"github.com/kencx/dusk"
	"github.com/kencx/dusk/ui/partials/icons"
	"github.com/kencx/dusk/ui/shared"
)

type BookForm struct {
	book *dusk.Book
	shared.Base
}

func NewBookForm(base shared.Base, book *dusk.Book, err error) *BookForm {
	base.Err = err
	return &BookForm{book, base}
}

func (v *BookForm) Render(rw http.ResponseWriter, r *http.Request) {
	v.Html().Render(r.Context(), rw)
}

templ (v *BookForm) Html() {
	@v.Base.Html() {
		if v.Err != nil {
			{ "Something went wrong" }
		} else if v.book != nil {
			<div class="book__edit">
				<div class="back">
					<a href={ templ.URL(fmt.Sprintf("/b/%s", v.book.Slugify())) }>
						@icons.LeftArrow()
						Back
					</a>
				</div>
				<h2>Editing: { v.book.Title }</h2>
				<form action="" hx-put={ fmt.Sprintf("/b/%s", v.book.Slugify()) }>
					<fieldset>
						<label>
							Title
							<input type="text" name="title" value={ v.book.Title } required/>
						</label>
						<label>
							Subtitle
							<input type="text" name="subtitle" value={ v.book.Subtitle.ValueOrZero() }/>
						</label>
						<label>
							Author(s)
							<input type="text" name="author" value={ strings.Join(v.book.Author, "; ") } required/>
							<small>
								Authors should be semicolon-separated.
							</small>
						</label>
						<label>
							ISBN
							<input
								type="text"
								name="isbn"
								value={ strings.Join(append(v.book.Isbn10, v.book.Isbn13...), ", ") }
							/>
							<small>
								<a href="https://www.isbn-13.info/example">ISBNs</a> must contain 10 or 13 characters, excluding dashes and spaces.
							</small>
						</label>
						/* <label> */
						/* 	Identifiers */
						/* 	<input type="text" name="identifiers"/> */
						/* </label> */
						<label>
							Tags
							<input
								type="text"
								name="tags"
								value={ strings.Join(v.book.Tag, ", ") }
							/>
							<small>
								Tags should be comma-separated.
							</small>
						</label>
						<label>
							Series
							<input type="text" name="series" value={ v.book.Series.ValueOrZero() }/>
						</label>
					</fieldset>
					<fieldset class="grid">
						<label>
							Number of Pages
							<input
								type="number"
								name="numOfPages"
								value={ strconv.Itoa(v.book.NumOfPages) }
								min="0"
							/>
						</label>
						<label>
							Rating (out of 10)
							<input
								type="number"
								name="rating"
								value={ strconv.Itoa(v.book.Rating) }
								min="0"
								max="10"
							/>
						</label>
						<label>
							Date Added
							<input
								type="date"
								name="dateAdded"
								if v.book.DateAdded.Valid {
									value={ v.book.DateAdded.ValueOrZero().Format("2006-01-02") }
								}
							/>
						</label>
					</fieldset>
					<fieldset class="grid">
						<label>
							Publisher
							<input type="text" name="publisher" value={ v.book.Publisher.ValueOrZero() }/>
						</label>
						<label>
							Date Published
							<input
								type="date"
								name="datePublished"
								if v.book.DatePublished.Valid {
									value={ v.book.DatePublished.ValueOrZero().Format("2006-01-02") }
								}
							/>
						</label>
					</fieldset>
					<fieldset class="grid">
						<label>
							Status
							<select name="read-status">
								switch v.book.Status {
									case dusk.Unread:
										<option selected>Unread</option>
										<option>Reading</option>
										<option>Read</option>
									case dusk.Reading:
										<option>Unread</option>
										<option selected>Reading</option>
										<option>Read</option>
									case dusk.Read:
										<option>Unread</option>
										<option>Reading</option>
										<option selected>Read</option>
								}
							</select>
						</label>
						<label>
							Date Started
							<input
								type="date"
								name="dateStarted"
								if v.book.DateStarted.Valid {
									value={ v.book.DateStarted.ValueOrZero().Format("2006-01-02") }
								}
							/>
						</label>
						<label>
							Date Completed
							<input
								type="date"
								name="dateCompleted"
								if v.book.DateCompleted.Valid {
									value={ v.book.DateCompleted.ValueOrZero().Format("2006-01-02") }
								}
							/>
						</label>
					</fieldset>
					<label>
						Description
						<textarea name="description" value={ v.book.Description.ValueOrZero() }></textarea>
					</label>
					<label>
						Cover file
						<div class="filedrop-container">
							<input type="file" name="cover" accept="image/*"/>
							<small>Supported file types: jpeg, jpg, png</small>
						</div>
					</label>
					<label>
						<input type="checkbox" name="another"/>
						Add another?
					</label>
					<div class="button-group">
						<input type="submit" value="Submit"/>
						<a href={ templ.URL(fmt.Sprintf("/b/%s", v.book.Slugify())) } role="button">Cancel</a>
					</div>
				</form>
			</div>
		}
	}
}
