package views

import (
	"net/http"
	"strconv"
	"path"

	"github.com/kencx/dusk"
	"github.com/kencx/dusk/ui/partials"
)

type AuthorList struct {
	authors dusk.Authors
	BaseView
}

func NewAuthorList(bv BaseView, authors dusk.Authors, err error) *AuthorList {
	bv.err = err
	return &AuthorList{authors, bv}
}

func (v *AuthorList) Render(rw http.ResponseWriter, r *http.Request) {
	v.Html().Render(r.Context(), rw)
}

templ (v *AuthorList) Html() {
	@v.BaseView.Html() {
		<h2>Authors</h2>
		if v.err == dusk.ErrNoRows {
			@partials.Empty()
		} else if v.authors != nil {
			@partials.ItemSearch("/a/search", ".list")
			<div class="list">
				@AuthorSearchResults(v.authors, v.err)
			</div>
		}
	}
}

templ AuthorSearchResults(authors dusk.Authors, err error) {
	<div class="list__metadata">
		{ strconv.Itoa(len(authors)) }
		if len(authors) == 1 {
			author
		} else {
			authors
		}
	</div>
	<div class="list__author-view">
		@partials.ItemSearchResults(authors, err) {
			<ul>
				for _, author := range authors {
					@listItem(author)
				}
			</ul>
		}
	</div>
}

templ listItem(author *dusk.Author) {
	<li>
		<a href={ templ.URL(path.Join("a", author.Slugify())) }>
			{ author.Name }
		</a>
	</li>
}
