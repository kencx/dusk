package views

import (
	"fmt"
	"net/http"
	"path"
	"strconv"
	"strings"

	"github.com/kencx/dusk"
	"github.com/kencx/dusk/null"
	"github.com/kencx/dusk/ui/partials"
	"github.com/kencx/dusk/ui/partials/icons"
	"github.com/kencx/dusk/ui/shared"
	"github.com/kencx/dusk/util"
)

type Book struct {
	book    *dusk.Book
	authors []dusk.Author
	tags    []dusk.Tag

	Tabs       partials.TabGroup
	defaultTab string

	shared.Base
}

func NewBook(base shared.Base, book *dusk.Book, authors []dusk.Author, tags []dusk.Tag, defaultTab string, err error) *Book {
	base.Err = err
	return &Book{
		book:       book,
		authors:    authors,
		tags:       tags,
		Tabs:       BookTabs(book),
		defaultTab: defaultTab,
		Base:       base,
	}
}

func BookTabs(book *dusk.Book) partials.TabGroup {
	return partials.TabGroup{
		RootPath: fmt.Sprintf("/b/%s", book.Slugify()),
		Order:    []string{"metadata", "progress", "links", "notes"},
		Tabs: []partials.Tab{
			{
				Name:      "Metadata",
				Link:      "metadata",
				Component: bookMetadata(book),
			},
			{
				Name:      "Progress",
				Link:      "progress",
				Component: bookProgress(book),
			},
			{
				Name:      "Links",
				Link:      "links",
				Component: bookLinks(book),
			},
			{
				Name:      "Notes",
				Link:      "notes",
				Component: bookNotes(book),
			},
		},
	}
}

func (v *Book) Render(rw http.ResponseWriter, r *http.Request) {
	v.Html().Render(r.Context(), rw)
}

templ (v *Book) Html() {
	@v.Base.Html() {
		<div>
			if v.Err == dusk.ErrDoesNotExist {
				@partials.NotFound()
			} else if v.book != nil {
				<div class="book__details">
					@bookCover(v.book.Cover)
					@v.bookAuthors()
					<div class="header">
						@v.title()
						@v.rating()
						@v.tagsRender()
						@v.description()
						@v.actions()
					</div>
				</div>
				@partials.Tabs(v.Tabs, v.defaultTab)
			} else {
				<p>Something went wrong, please try again.</p>
			}
		</div>
	}
}

templ (v Book) title() {
	<hgroup>
		<h3>
			{ v.book.Title }
		</h3>
		if v.book.Subtitle.Valid {
			<small class="subtitle">{ v.book.Subtitle.String }</small>
		}
	</hgroup>
}

templ bookCover(cover null.String) {
	<div class="cover">
		if !cover.Valid {
			<img alt="" src="/static/img/default_cover.jpg"/>
		} else if strings.HasPrefix(cover.String, "http://") || strings.HasPrefix(cover.String, "https://") {
			<img alt="" src={ cover.String }/>
		} else {
			<img alt="" src={ path.Join("/files", cover.String) }/>
		}
	</div>
}

templ (v Book) bookAuthors() {
	<p>
		for _, a := range v.authors {
			<span class="author"><a href={ templ.URL(path.Join("/a", a.Slugify())) }>{ a.Name }</a></span>
		}
	</p>
}

templ (v Book) tagsRender() {
	<div class="tags">
		for _, tag := range v.tags {
			<span class="tag">
				if len(tag.Name) > 25 {
					<a href={ templ.URL(path.Join("/t", tag.Slugify())) } data-tooltip={ tag.Name }>{ tag.Name[:25] + "..." }</a>
				} else {
					<a href={ templ.URL(path.Join("/t", tag.Slugify())) }>{ tag.Name }</a>
				}
			</span>
		}
	</div>
}

templ (v Book) rating() {
  {{ rate := v.book.Rating }}
	<div class="rating">
		if rate == 0 {
			for range 5 {
				@icons.StarEmpty()
			}
		} else if halfRating(rate) {
			for range (rate/2) {
				@icons.StarFilled()
			}
			@icons.StarHalf()
		} else {
			for range (rate/2) {
				@icons.StarFilled()
			}
		}
	</div>
}

templ (v Book) description() {
  if v.book.Description.Valid {
    {{ desc := v.book.Description.String }}
    <details class="desc-excerpt">
        <summary>
          <span>
            if len(desc) > 200 {
              { desc[:200] + "..." }
            } else {
              { desc + "..." }
            }
          </span>
        </summary>
        <div class="desc">{ desc }</div>
    </details>
  }
}

templ (v Book) actions() {
	<div class="actions">
		@BookStatus(v.book)
		<details class="dropdown">
			if len(v.book.Formats) > 0 {
				<summary role="button" class="icon">
					@icons.Download()
				</summary>
				<ul>
					for _, format := range v.book.Formats {
						<li><a href="#">{ format }</a></li>
					}
				</ul>
			} else {
				<summary role="button" class="icon" disabled>
					@icons.Download()
				</summary>
			}
		</details>
		<a
			role="button"
			class="icon"
			data-tooltip="Edit details"
			href={ templ.SafeURL(fmt.Sprintf("/b/%s/edit", v.book.Slugify())) }
		>
			@icons.Edit()
		</a>
		<button class="icon" data-tooltip="Add notes">
			@icons.Book()
		</button>
		@partials.ModalButton(templ.Attributes{
			"class":        "icon",
			"data-tooltip": "Delete book",
			"hx-get":       fmt.Sprintf("/b/%s?delete", v.book.Slugify()),
		}) {
			@icons.Delete()
		}
		<div id="modal-content"></div>
	</div>
}

templ BookStatus(book *dusk.Book) {
}

templ (v Book) status() {
	<form
		hx-put={ fmt.Sprintf("/b/%s/status", v.book.Slugify()) }
		hx-target="this"
		hx-swap="outerHTML"
		hx-trigger="change"
		hx-include="this"
	>
		switch v.book.Status {
			case dusk.Unread:
				<details class="dropdown" data-tooltip="Unread">
					<summary role="button" class="icon">
						@icons.CheckBoxEmpty()
					</summary>
					@bookStatusRadio(v.book.Status)
				</details>
			case dusk.Reading:
				<details class="dropdown" data-tooltip="Reading">
					<summary role="button" class="icon">
						@icons.CheckBoxIndeterminate()
					</summary>
					@bookStatusRadio(v.book.Status)
				</details>
			case dusk.Read:
				<details class="dropdown" data-tooltip="Read">
					<summary role="button" class="icon">
						@icons.CheckBoxFilled()
					</summary>
					@bookStatusRadio(v.book.Status)
				</details>
		}
	</form>
}

var statusMap = map[dusk.ReadStatus]string{
	dusk.Unread:  "unread",
	dusk.Reading: "reading",
	dusk.Read:    "read",
}

templ bookStatusRadio(status dusk.ReadStatus) {
	<ul>
		for i := range 3 {
			<li>
				<label>
					<input
						type="radio"
						name="read-status"
						id={ statusMap[dusk.ReadStatus(i)] }
						value={ statusMap[dusk.ReadStatus(i)] }
						if status == dusk.ReadStatus(i) {
							checked
						}
					/>
					{ util.TitleCase(statusMap[dusk.ReadStatus(i)]) }
				</label>
			</li>
		}
	</ul>
}

templ DeleteBookModal(book *dusk.Book) {
	@partials.ModalDialog() {
		<h5>Delete { book.Title }?</h5>
		<p>This action is irreversible.</p>
		<footer>
			<button class="secondary" id="modal-cancel-btn">Cancel</button>
			<button
				hx-delete={ path.Join("/b", book.Slugify()) }
				hx-target="body"
			>
				Confirm
			</button>
		</footer>
	}
}

func halfRating(rating int) bool {
	rating5 := float64(rating) / 2
	return rating5 != float64(int64(rating5))
}

templ bookMetadata(book *dusk.Book) {
	<div class="metadata">
		if book.Series.Valid {
			<div>Series</div>
			{ book.Series.String }
		}
		if book.NumOfPages > 0 {
			<div>Pages</div>
			{ strconv.Itoa(book.NumOfPages) }
		}
		if book.Publisher.Valid {
			<div>Publisher</div>
			{ book.Publisher.String }
		}
		if book.DatePublished.Valid {
			<div>Published</div>
			{ util.PrintDateMonthYear(book.DatePublished) }
		}
		if len(book.Isbn10) > 0 {
			<div>ISBN</div>
			for _, i := range book.Isbn10 {
				{ i }
			}
		}
		if len(book.Isbn13) > 0 {
			<div>ISBN13</div>
			for _, i := range book.Isbn13 {
				{ i }
			}
		}
		if book.DateAdded.Valid {
			<div>Date Added</div>
			{ util.PrintDateFull(book.DateAdded) }
		}
		if book.DateCompleted.Valid {
			<div>Date Completed</div>
			{ util.PrintDateFull(book.DateCompleted) }
		}
	</div>
}

templ bookProgress(book *dusk.Book) {
	<progress value={ strconv.Itoa(book.Progress) } max="100"></progress>
}

var bookLinkMap = map[string]string{
	"GoogleBooks":    "https://google.com/search?tbm=bks&q=isbn:%s",
	"OpenLibrary":    "https://openlibrary.org/search?isbn=%s",
	"WorldCat":       "https://www.worldcat.org/search?q=isbn:%s",
	"Goodreads":      "https://www.goodreads.com/search?search[query]=%s&commit=Search&search_type=books",
	"LibraryThing":   "https://www.librarything.com/isbn/%s",
	"Wikipedia":      "https://wikipedia.org/wiki/Special:BookSources?isbn=%s",
	"NLB":            "https://search.nlb.gov.sg/onesearch/Search?query=%s",
	"Anna's Archive": "https://annas-archive.org/search?q=%s",
}

templ bookLinks(book *dusk.Book) {
	<div class="links">
		<ul>
			for k, v := range bookLinkMap {
				<li>
					<a href={ templ.SafeURL(fmt.Sprintf(v, book.Isbn10[0])) }>{ k }</a>
				</li>
			}
		</ul>
	</div>
}

templ bookNotes(book *dusk.Book) {
	<div class="notes">{ book.Notes.ValueOrZero() }</div>
}
