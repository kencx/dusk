package views

import (
	"fmt"
	"net/http"
	"path"
	"strconv"
	"strings"

	"github.com/kencx/dusk"
	"github.com/kencx/dusk/null"
	"github.com/kencx/dusk/ui/partials"
	"github.com/kencx/dusk/ui/partials/icons"
)

type Book struct {
	book *dusk.Book
	BaseView
}

func NewBook(bv BaseView, book *dusk.Book, err error) *Book {
	bv.err = err
	return &Book{book, bv}
}

func (v *Book) Render(rw http.ResponseWriter, r *http.Request) {
	v.Html().Render(r.Context(), rw)
}

templ (v *Book) Html() {
	@v.BaseView.Html() {
		<div>
			if v.err == dusk.ErrDoesNotExist {
				@partials.NotFound()
			} else if v.book != nil {
				<div class="book__details">
					@bookCover(v.book.Cover)
					<div class="header">
						<hgroup>
							<h3>
								{ v.book.Title }
							</h3>
							if v.book.Subtitle.Valid {
								<small class="subtitle">{ v.book.Subtitle.String }</small>
							}
						</hgroup>
						@bookAuthors(v.book.Author)
						@bookRating(v.book.Rating)
						@bookTags(v.book.Tag)
						@bookDetails(v.book)
						@bookActions(v.book)
					</div>
				</div>
				<hr/>
				<div class="notes">{ v.book.Notes.ValueOrZero() }</div>
				<p>
					{ `Lorem ipsum dolor sit amet, officia excepteur ex fugiat reprehenderit enim
        labore culpa sint ad nisi Lorem pariatur mollit ex esse exercitation amet. Nisi
        anim cupidatat excepteur officia. Reprehenderit nostrud nostrud ipsum Lorem est
        aliquip amet voluptate voluptate dolor minim nulla est proident. Nostrud officia
        pariatur ut officia. Sit irure elit esse ea nulla sunt ex occaecat reprehenderit
        commodo officia dolor Lorem duis laboris cupidatat officia voluptate. Culpa
        proident adipisicing id nulla nisi laboris ex in Lorem sunt duis officia
        eiusmod. Aliqua reprehenderit commodo ex non excepteur duis sunt velit enim.
        Voluptate laboris sint cupidatat ullamco ut ea consectetur et est culpa et culpa
        duis.` }
				</p>
			} else {
				<p>Something went wrong, please try again.</p>
			}
		</div>
	}
}

templ bookCover(cover null.String) {
	<div class="cover">
		if !cover.Valid {
			<img alt="" src="/static/img/default_cover.jpg"/>
		} else if strings.HasPrefix(cover.String, "http://") || strings.HasPrefix(cover.String, "https://") {
			<img alt="" src={ cover.String }/>
		} else {
			<img alt="" src={ path.Join("/files", cover.String) }/>
		}
	</div>
}

templ bookAuthors(authors []string) {
	<p>
		for _, a := range authors {
			<span class="author"><a href={ templ.URL(path.Join("/a", a)) }>{ a }</a></span>
		}
	</p>
}

templ bookTags(tags []string) {
	<div class="tags">
		for _, tag := range tags {
			<span class="tag">
				if len(tag) > 25 {
					<a href={ templ.URL(path.Join("/t", tag)) } data-tooltip={ tag }>{ tag[:25] + "..." }</a>
				} else {
					<a href={ templ.URL(path.Join("/t", tag)) }>{ tag }</a>
				}
			</span>
		}
	</div>
}

templ bookRating(rating int) {
	<div class="rating">
		if rating == 0 {
			for range 5 {
				@icons.StarEmpty()
			}
		} else if halfRating(rating) {
			for range (rating/2) {
				@icons.StarFilled()
			}
			@icons.StarHalf()
		} else {
			for range (rating/2) {
				@icons.StarFilled()
			}
		}
	</div>
}

templ bookDetails(book *dusk.Book) {
	<details class="desc-excerpt">
		if book.Description.Valid {
			<summary>
				<span>
					if len(book.Description.String) > 200 {
						{ book.Description.String[:200] + "..." }
					} else {
						{ book.Description.String + "..." }
					}
				</span>
			</summary>
			<div class="desc">{ book.Description.String }</div>
		} else {
			<summary>
				<span>Show details...</span>
			</summary>
		}
		@bookMetadata(book)
	</details>
}

templ bookMetadata(book *dusk.Book) {
	<div class="metadata">
		<div class="key">
			Series
			<br/>
			Publisher
			<br/>
			Published
			<br/>
			ISBN
			<br/>
			ISBN13
			<br/>
			Pages
		</div>
		<div class="value">
			if book.Series.Valid {
				{ book.Series.String }
			}
			<br/>
			if book.Publisher.Valid {
				{ book.Publisher.String }
			}
			<br/>
			if book.DatePublished.Valid {
				{ printDateFormat(book.DatePublished) }
			}
			<br/>
			for _, i := range book.Isbn10 {
				{ i }
			}
			<br/>
			for _, i := range book.Isbn13 {
				{ i }
			}
			<br/>
			{ strconv.Itoa(book.NumOfPages) }
		</div>
	</div>
}

templ bookActions(book *dusk.Book) {
	<div class="actions">
		<details class="dropdown">
			if len(book.Formats) > 0 {
				<summary role="button" class="icon">
					@icons.Download()
				</summary>
				<ul>
					for _, format := range book.Formats {
						<li><a href="#">{ format }</a></li>
					}
				</ul>
			} else {
				<summary role="button" class="icon" disabled>
					@icons.Download()
				</summary>
			}
		</details>
		<button class="icon" data-tooltip="Edit details">
			@icons.Edit()
		</button>
		<button class="icon" data-tooltip="Add notes">
			@icons.Book()
		</button>
		@partials.ModalButton(templ.Attributes{
			"class":        "icon",
			"data-tooltip": "Delete book",
			"hx-get":       fmt.Sprintf("/b/%s?delete", book.Slugify()),
		}) {
			@icons.Delete()
		}
		<div id="modal-content"></div>
	</div>
}

templ DeleteBookModal(book *dusk.Book) {
	@partials.ModalDialog() {
		<h5>Delete { book.Title }?</h5>
		<p>This action is irreversible.</p>
		<footer>
			<button class="secondary" id="modal-cancel-btn">Cancel</button>
			<button
				hx-delete={ path.Join("/b", book.Slugify()) }
				hx-target="body"
			>
				Confirm
			</button>
		</footer>
	}
}

func halfRating(rating int) bool {
	rating5 := float64(rating) / 2
	return rating5 != float64(int64(rating5))
}

func printDateFormat(date null.Time) string {
	year, month, _ := date.ValueOrZero().Date()
	return fmt.Sprintf("%s %d", month.String()[:3], year)
}
