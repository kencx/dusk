package views

import (
	"fmt"
	"net/http"
	"path"
	"strconv"
	"strings"

	"github.com/kencx/dusk"
	"github.com/kencx/dusk/null"
	"github.com/kencx/dusk/ui/partials"
	"github.com/kencx/dusk/ui/partials/icons"
	"github.com/kencx/dusk/ui/shared"
)

type Book struct {
	book    *dusk.Book
	authors []dusk.Author
	tags    []dusk.Tag
	shared.Base
}

func NewBook(base shared.Base, book *dusk.Book, authors []dusk.Author, tags []dusk.Tag, err error) *Book {
	base.Err = err
	return &Book{book, authors, tags, base}
}

func (v *Book) Render(rw http.ResponseWriter, r *http.Request) {
	v.Html().Render(r.Context(), rw)
}

templ (v *Book) Html() {
	@v.Base.Html() {
		<div>
			if v.Err == dusk.ErrDoesNotExist {
				@v.Base.NotFound()
			} else if v.book != nil {
				<div class="book__details">
					@bookCover(v.book.Cover)
					<div class="header">
						<hgroup>
							<h3>
								{ v.book.Title }
							</h3>
							if v.book.Subtitle.Valid {
								<small class="subtitle">{ v.book.Subtitle.String }</small>
							}
						</hgroup>
						@v.bookAuthors()
						@bookRating(v.book.Rating)
						@v.bookTags()
						@bookDetails(v.book)
						@bookActions(v.book)
					</div>
				</div>
				<hr/>
				<div class="notes">{ v.book.Notes.ValueOrZero() }</div>
			} else {
				<p>Something went wrong, please try again.</p>
			}
		</div>
	}
}

templ bookCover(cover null.String) {
	<div class="cover">
		if !cover.Valid {
			<img alt="" src="/static/img/default_cover.jpg"/>
		} else if strings.HasPrefix(cover.String, "http://") || strings.HasPrefix(cover.String, "https://") {
			<img alt="" src={ cover.String }/>
		} else {
			<img alt="" src={ path.Join("/files", cover.String) }/>
		}
	</div>
}

templ (v *Book) bookAuthors() {
	<p>
		for _, a := range v.authors {
			<span class="author"><a href={ templ.URL(path.Join("/a", a.Slugify())) }>{ a.Name }</a></span>
		}
	</p>
}

templ (v *Book) bookTags() {
	<div class="tags">
		for _, tag := range v.tags {
			<span class="tag">
				if len(tag.Name) > 25 {
					<a href={ templ.URL(path.Join("/t", tag.Slugify())) } data-tooltip={ tag.Name }>{ tag.Name[:25] + "..." }</a>
				} else {
					<a href={ templ.URL(path.Join("/t", tag.Slugify())) }>{ tag.Name }</a>
				}
			</span>
		}
	</div>
}

templ bookRating(rating int) {
	<div class="rating">
		if rating == 0 {
			for range 5 {
				@icons.StarEmpty()
			}
		} else if halfRating(rating) {
			for range (rating/2) {
				@icons.StarFilled()
			}
			@icons.StarHalf()
		} else {
			for range (rating/2) {
				@icons.StarFilled()
			}
		}
	</div>
}

templ bookDetails(book *dusk.Book) {
	<details class="desc-excerpt">
		if book.Description.Valid {
			<summary>
				<span>
					if len(book.Description.String) > 200 {
						{ book.Description.String[:200] + "..." }
					} else {
						{ book.Description.String + "..." }
					}
				</span>
			</summary>
			<div class="desc">{ book.Description.String }</div>
		} else {
			<summary>
				<span>Show details...</span>
			</summary>
		}
		@bookMetadata(book)
	</details>
}

templ bookMetadata(book *dusk.Book) {
	<div class="metadata">
		if book.Series.Valid {
			<div>Series</div>
			{ book.Series.String }
		}
		if book.NumOfPages > 0 {
			<div>Pages</div>
			{ strconv.Itoa(book.NumOfPages) }
		}
		if book.Publisher.Valid {
			<div>Publisher</div>
			{ book.Publisher.String }
		}
		if book.DatePublished.Valid {
			<div>Published</div>
			{ printDateFormat(book.DatePublished) }
		}
		if len(book.Isbn10) > 0 {
			<div>ISBN</div>
			for _, i := range book.Isbn10 {
				{ i }
			}
		}
		if len(book.Isbn13) > 0 {
			<div>ISBN13</div>
			for _, i := range book.Isbn13 {
				{ i }
			}
		}
	</div>
}

templ bookActions(book *dusk.Book) {
	<div class="actions">
		<details class="dropdown">
			if len(book.Formats) > 0 {
				<summary role="button" class="icon">
					@icons.Download()
				</summary>
				<ul>
					for _, format := range book.Formats {
						<li><a href="#">{ format }</a></li>
					}
				</ul>
			} else {
				<summary role="button" class="icon" disabled>
					@icons.Download()
				</summary>
			}
		</details>
		<a
			role="button"
			class="icon"
			data-tooltip="Edit details"
			href={ templ.SafeURL(fmt.Sprintf("/b/%s/edit", book.Slugify())) }
		>
			@icons.Edit()
		</a>
		<button class="icon" data-tooltip="Add notes">
			@icons.Book()
		</button>
		@partials.ModalButton(templ.Attributes{
			"class":        "icon",
			"data-tooltip": "Delete book",
			"hx-get":       fmt.Sprintf("/b/%s?delete", book.Slugify()),
		}) {
			@icons.Delete()
		}
		<div id="modal-content"></div>
	</div>
}

templ DeleteBookModal(book *dusk.Book) {
	@partials.ModalDialog() {
		<h5>Delete { book.Title }?</h5>
		<p>This action is irreversible.</p>
		<footer>
			<button class="secondary" id="modal-cancel-btn">Cancel</button>
			<button
				hx-delete={ path.Join("/b", book.Slugify()) }
				hx-target="body"
			>
				Confirm
			</button>
		</footer>
	}
}

func halfRating(rating int) bool {
	rating5 := float64(rating) / 2
	return rating5 != float64(int64(rating5))
}

func printDateFormat(date null.Time) string {
	year, month, _ := date.ValueOrZero().Date()
	return fmt.Sprintf("%s %d", month.String()[:3], year)
}
